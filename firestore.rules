rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading basic tutor info for search/discovery
      allow read: if request.auth != null && 
        resource.data.role == 'tutor';
      
      // Admin can read/write any user
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Prevent writes to derived fields by non-admin users
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        (!('ratingAvg' in request.resource.data) || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') &&
        (!('ratingCount' in request.resource.data) || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') &&
        (!('xp' in request.resource.data) || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') &&
        (!('badges' in request.resource.data) || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Subjects collection
    match /subjects/{subjectId} {
      // Tutors can manage their own subjects
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.tutorId;
      
      // Allow creating subjects for own tutorId
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.tutorId;
      
      // Allow reading subjects for discovery
      allow read: if request.auth != null;
      
      // Admin can read/write any subject
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Bookings collection
    match /bookings/{bookingId} {
      // Students can create bookings for themselves
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.studentId;
      
      // Students can read their own bookings
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.studentId;
      
      // Tutors can read bookings where they are the tutor
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.tutorId;
      
      // Tutors can update status of their bookings
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.tutorId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
      
      // Admin can read/write any booking
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Reviews collection
    match /reviews/{reviewId} {
      // Only allow creation if student has completed session with tutor
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.studentId;
      
      // Allow reading reviews for tutors
      allow read: if request.auth != null;
      
      // Students can read/update their own reviews
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.studentId;
      
      // Admin can read/write any review
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Weekly availability collection
    match /weeklyAvailability/{availabilityId} {
      // Tutors can manage their own availability
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.tutorId;
      
      // Allow reading availability for booking purposes
      allow read: if request.auth != null;
      
      // Admin can read/write any availability
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Availability overrides collection
    match /availabilityOverrides/{overrideId} {
      // Tutors can manage their own availability overrides
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.tutorId;
      
      // Allow reading overrides for booking purposes
      allow read: if request.auth != null;
      
      // Admin can read/write any override
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
